需求：
    咖啡店购买咖啡，需要灵活添加配料和选择咖啡种类

问题：
    如何灵活，扩展性强


思路一：
    使用装饰者模式，让配料和咖啡共同实现一个接口（其实觉得建造者模式也可以）



设计模式：
    装饰者模式，动态地将责任附加到对象上，若要扩展功能，装饰者提供了比继承更有弹性的替代方案，通过一系列的小类（子类）来包装
    共同的父类，符合开闭原则。比如jdk中的java.io.InputStream ，旗下有Filexxx,Bufferdxxx...很多的子类来包装